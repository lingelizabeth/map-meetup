{"version":3,"sources":["styles.js","Components/Home.js","Components/Calculate.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","h1","SearchContainer","SearchInput","input","SearchButton","button","SearchBar","value","setValue","history","useHistory","onClick","push","Home","mapStyles","width","height","GoogleApiWrapper","apiKey","google","props","zoom","style","initialCenter","lat","lng","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uvDAEO,IAAMA,EAAYC,IAAOC,IAAV,KAYTC,EAAQF,IAAOG,GAAV,KAMLC,EAAkBJ,IAAOC,IAAV,KAOfI,EAAcL,IAAOM,MAAV,KAaXC,EAAeP,IAAOQ,OAAV,K,OCvBnBC,EAAY,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACjBC,EAAUC,cAEhB,OACI,kBAACT,EAAD,KACI,kBAACC,EAAD,CACIK,MAAOA,EACPC,SAAUA,IACd,kBAACJ,EAAD,CAAcO,QAAS,kBAAMF,EAAQG,KAAK,iBAA1C,cAIGC,EAtBF,kBACT,kBAACjB,EAAD,KACI,kBAACG,EAAD,oBACA,kBAAC,EAAD,Q,QCPFe,EAAY,CACdC,MAAO,OACPC,OAAQ,QAeGC,6BAAiB,CAC5BC,OAAQ,2CADGD,EAZG,kBACd,6BACI,6CACJ,kBAAC,MAAD,CACME,a,GAAaC,MAAMD,OACnBE,KAAM,EACNC,MAAOR,EACPS,cAAe,CAAEC,IAAK,OAAQC,KAAM,e,cCY/BC,MAjBf,WAEE,OACE,kBAAC,IAAD,CAAQC,SAAUC,eAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c1c4c7e.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    background: linear-gradient(\r\n      rgba(0, 0, 0, 0.05), \r\n      rgba(0, 0, 0, 0.45)\r\n    ),url(https://miro.medium.com/max/4064/1*qYUvh-EtES8dtgKiBRiLsA.png);\r\n`\r\nexport const Title = styled.h1`\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    font-size: 80pt;\r\n    margin: 10px;\r\n    color: white;\r\n`\r\nexport const SearchContainer = styled.div`\r\n    width: 50vw;\r\n    height: 7vh;\r\n    display:flex;\r\n    border-radius: 10px;\r\n    box-shadow: -3px 4px 10px rgba(0, 0, 0, 0.25);\r\n`\r\nexport const SearchInput = styled.input`\r\n    border-radius: 10px 0 0 10px;\r\n    width: 75%;\r\n    border:none;\r\n    padding: 2px 2px 2px 32px;\r\n    background-image: url(https://img.icons8.com/all/500/search--v1.png);\r\n    background-size: 15px;\r\n    background-repeat: no-repeat;\r\n    background-position: 10px 12px;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n`\r\nexport const SearchButton = styled.button`\r\n    border-radius: 0 10px 10px 0;\r\n    flex-grow: 1;\r\n    color: white;\r\n    border: none;\r\n    background-color: #4478FF;\r\n    outline:none;\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n    &:hover{\r\n      cursor:pointer;\r\n    }\r\n`","import React from 'react'\r\nimport {Container, Title, SearchContainer, SearchButton, SearchInput} from '../styles'\r\n// import {GoogleApiWrapper} from 'google-maps-react'\r\n//import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\r\n// import SearchBoxContainer from './Searchbox'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst Home = () => (\r\n    <Container>\r\n        <Title>where2meet?</Title>\r\n        <SearchBar></SearchBar>\r\n    </Container>\r\n\r\n)\r\n\r\n\r\n\r\nconst SearchBar = ({value, setValue}) => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <SearchContainer>\r\n            <SearchInput  \r\n                value={value} \r\n                setValue={setValue}></SearchInput>\r\n            <SearchButton onClick={() => history.push('./calculate')}>Let's go</SearchButton>\r\n        </SearchContainer>\r\n    );\r\n}\r\nexport default Home","import React from 'react'\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n  };\r\n\r\nconst Calculate = () => (\r\n    <div>\r\n        <p>CALCULATE PAGE</p>\r\n    <Map\r\n          google={this.props.google}\r\n          zoom={8}\r\n          style={mapStyles}\r\n          initialCenter={{ lat: 47.444, lng: -122.176}}\r\n        />\r\n\r\n    </div>\r\n)\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'AIzaSyDGlY-kxEPPTY9mgGkHpY6WlPqQQpMflvo'\r\n  })(Calculate);","import React from 'react';\nimport Home from './Components/Home'\nimport Calculate from './Components/Calculate'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/calculate\">\n          <Calculate></Calculate>\n        </Route>\n        <Route path=\"/\">\n          <Home></Home>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}