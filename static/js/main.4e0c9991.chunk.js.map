{"version":3,"sources":["styles.js","Components/Searchbox.js","Components/Home.js","Components/MapContainer.js","Components/Calculate.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","h1","SearchContainer","SearchInput","input","SearchButton","button","require","compose","withProps","lifecycle","withScriptjs","StandaloneSearchBox","SearchBoxContainer","googleMapURL","loadingElement","style","height","containerElement","componentWillMount","refs","this","setState","places","onSearchBoxMounted","ref","searchBox","onPlacesChanged","getPlaces","props","setValue","JSON","stringify","type","console","log","data-standalone-searchbox","flexGrow","bounds","placeholder","map","place_id","formatted_address","location","geometry","key","lat","lng","reducer","state","action","SearchBar","history","useHistory","useReducer","placesDispatch","value","onClick","push","pathname","data","Home","MapContainer","withGoogleMap","defaultZoom","defaultCenter","isMarkerShown","position","mapElement","Component","Calculate","App","basename","process","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e0c9991.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    background: linear-gradient(\r\n      rgba(0, 0, 0, 0.05), \r\n      rgba(0, 0, 0, 0.45)\r\n    ),url(https://miro.medium.com/max/4064/1*qYUvh-EtES8dtgKiBRiLsA.png);\r\n`\r\nexport const Title = styled.h1`\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    font-size: 80pt;\r\n    margin: 10px;\r\n    color: white;\r\n`\r\nexport const SearchContainer = styled.div`\r\n    width: 50vw;\r\n    height: 7vh;\r\n    display:flex;\r\n    border-radius: 10px;\r\n    box-shadow: -3px 4px 10px rgba(0, 0, 0, 0.25);\r\n`\r\nexport const SearchInput = styled.input`\r\n    border-radius: 10px 0 0 10px;\r\n    width: 100%;\r\n    height: 100%;\r\n    border:none;\r\n    padding: 0px 0px 0px 30px;\r\n    background-image: url(https://img.icons8.com/all/500/search--v1.png);\r\n    background-size: 15px;\r\n    background-repeat: no-repeat;\r\n    background-position: 10px 12px;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n`\r\nexport const SearchButton = styled.button`\r\n    border-radius: 0 10px 10px 0;\r\n    /* flex-grow: 1; */\r\n    width: 25%;\r\n    color: white;\r\n    border: none;\r\n    background-color: #4478FF;\r\n    outline:none;\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n    &:hover{\r\n      cursor:pointer;\r\n    }\r\n`","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport {SearchInput} from '../styles'\r\n\r\nconst { compose, withProps, lifecycle } = require(\"recompose\");\r\nconst {\r\n  withScriptjs,\r\n} = require(\"react-google-maps\");\r\nconst { StandaloneSearchBox } = require(\"react-google-maps/lib/components/places/StandaloneSearchBox\");\r\n\r\nconst SearchBoxContainer = compose(\r\n  withProps({\r\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGlY-kxEPPTY9mgGkHpY6WlPqQQpMflvo&v=3.exp&libraries=geometry,drawing,places\",\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `400px` }} />,\r\n\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {}\r\n\r\n      this.setState({\r\n        places: [],\r\n        onSearchBoxMounted: ref => {\r\n          refs.searchBox = ref;\r\n        },\r\n        onPlacesChanged: () => {\r\n          const places = refs.searchBox.getPlaces();\r\n          \r\n          this.setState({\r\n            places,\r\n          });\r\n\r\n          this.props.setValue(JSON.stringify(places[0]), {type: \"update\"}); //seems wrong\r\n          //this.props.value = [places] \r\n          //console.log(places)\r\n          console.log(\"in places_changed event \"+this.props);\r\n        },\r\n      })\r\n    },\r\n  }),\r\n  withScriptjs  \r\n)(props =>\r\n  <div data-standalone-searchbox=\"\" style={{flexGrow: 1}}> \r\n    <StandaloneSearchBox\r\n      ref={props.onSearchBoxMounted}\r\n      bounds={props.bounds}\r\n      onPlacesChanged={props.onPlacesChanged}\r\n    >\r\n      <SearchInput type=\"text\" placeholder=\"Search for a place\"></SearchInput>\r\n      {/* <input\r\n        type=\"text\"\r\n        placeholder=\"Customized your placeholder\"\r\n        style={{\r\n          boxSizing: `border-box`,\r\n          border: `1px solid transparent`,\r\n          width: `240px`,\r\n          height: `32px`,\r\n          padding: `0 12px`,\r\n          borderRadius: `3px`,\r\n          boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n          fontSize: `14px`,\r\n          outline: `none`,\r\n          textOverflow: `ellipses`,\r\n        }}\r\n      /> */}\r\n    </StandaloneSearchBox>\r\n    <ol>\r\n      {/* {(props.places.length !== 0) ? props.setValue(JSON.stringify(props.places[0]), {type: \"update\"}) : undefined}\r\n      {console.log(props)} */}\r\n      {props.places.map(({ place_id, formatted_address, geometry: { location } }) =>\r\n        <li key={place_id}>\r\n          {formatted_address}\r\n          {\" at \"}\r\n          ({location.lat()}, {location.lng()})\r\n        </li>\r\n      )}\r\n    </ol>\r\n  </div>\r\n);\r\n\r\nexport default SearchBoxContainer;","import React, { useReducer } from 'react'\r\nimport {Container, Title, SearchContainer, SearchButton, SearchInput} from '../styles'\r\n// import {GoogleApiWrapper} from 'google-maps-react'\r\n//import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\r\n// import SearchBoxContainer from './Searchbox'\r\nimport {useHistory} from 'react-router-dom'\r\nimport SearchBoxContainer from './Searchbox'\r\n\r\nconst Home = () => (\r\n    <Container>\r\n        <Title>where2meet?</Title>\r\n        <SearchBar></SearchBar>\r\n    </Container>\r\n\r\n)\r\n\r\nfunction reducer(state, action) {\r\n    if(action.type === 'update'){\r\n        console.log(\"reducer called with state \"+state);\r\n        return state; //literally just update state to be new state\r\n    }\r\n    return state;\r\n    // switch (action.type) {\r\n    //   case 'increment':\r\n    //     return {count: state.count + 1};\r\n    //   case 'decrement':\r\n    //     return {count: state.count - 1};\r\n    //   default:\r\n    //     throw new Error();\r\n    // }\r\n  }\r\n\r\n//const updatePlace = (newPlace) => reducer(newPlace, {type: 'update'})\r\n\r\nconst SearchBar = () => {\r\n    const history = useHistory();\r\n    const [places, placesDispatch] = useReducer(reducer, \"\");\r\n\r\n    return (\r\n        <SearchContainer>\r\n            <SearchBoxContainer value={places} setValue={placesDispatch}></SearchBoxContainer>\r\n            <SearchButton onClick={() => history.push({pathname: './calculate', data: places})}>Let's go</SearchButton>\r\n        </SearchContainer>\r\n    );\r\n}\r\nexport default Home","import React, { Component } from 'react';\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\r\n\r\nclass MapContainer extends Component {\r\n   render() {\r\n    const MapContainer = withScriptjs(withGoogleMap((props) =>\r\n    <GoogleMap\r\n      defaultZoom={8}\r\n      defaultCenter={{ lat: -34.397, lng: 150.644 }}\r\n    >\r\n      {props.isMarkerShown && <Marker position={{ lat: -34.397, lng: 150.644 }} />}\r\n    </GoogleMap>\r\n    ));\r\n   return(\r\n      <div>\r\n        <MapContainer\r\n          isMarkerShown\r\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGlY-kxEPPTY9mgGkHpY6WlPqQQpMflvo&v=3.exp&libraries=geometry,drawing,places\"\r\n          loadingElement={<div style={{ height: `100%` }} />}\r\n          containerElement={<div style={{ height: `400px` }} />} //this is where to change the container size\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n      </div>\r\n   );\r\n   }\r\n};\r\nexport default MapContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// start google-maps-react code\r\n// import React from 'react'\r\n// import {Map, GoogleApiWrapper} from 'google-maps-react';\r\n \r\n// const mapStyles = {\r\n//   width: '100%',\r\n//   height: '100%',\r\n// };\r\n\r\n// export class MapContainer extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <Map google={this.props.google} style={mapStyles} zoom={14}>\r\n \r\n//       </Map>\r\n//     );\r\n//   }\r\n// }\r\n \r\n// export default GoogleApiWrapper({\r\n//   apiKey: 'AIzaSyDGlY-kxEPPTY9mgGkHpY6WlPqQQpMflvo'\r\n// })(MapContainer)","import React from 'react'\r\nimport MapContainer from './MapContainer'\r\n\r\n\r\nconst Calculate = (props) => (\r\n    <div>\r\n        <p>CALCULATE PAGE </p>\r\n        <MapContainer></MapContainer>\r\n        {console.log(props.location.data)}\r\n\r\n    </div>\r\n)\r\nexport default Calculate","import React from 'react';\nimport Home from './Components/Home'\nimport Calculate from './Components/Calculate'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/calculate\" component={Calculate}>\n        </Route>\n        <Route path=\"/\">\n          <Home></Home>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}