{"version":3,"sources":["styles.js","Components/Searchbox.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","h1","SearchContainer","SearchButton","input","button","google","window","SearchBox","onPlacesChanged","props","searchBox","getPlaces","ref","this","type","React","findDOMNode","refs","maps","places","addListener","removeListener","Component","SearchBar","value","setValue","Home","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qvDAEO,IAAMA,EAAYC,IAAOC,IAAV,KAYTC,EAAQF,IAAOG,GAAV,KAMLC,EAAkBJ,IAAOC,IAAV,KAoBfI,GAbcL,IAAOM,MAAV,KAaIN,IAAOO,OAAV,M,gCCrCnBC,EAASC,OAAOD,OACDE,E,4MASnBC,gBAAkB,WACZ,EAAKC,MAAMD,iBACb,EAAKC,MAAMD,gBAAgB,EAAKE,UAAUC,c,uDAJ5C,OAAO,yCAAOC,IAAI,SAAYC,KAAKJ,MAA5B,CAAmCK,KAAK,Y,0CAQ/C,IAAIX,EAAQY,IAAMC,YAAYH,KAAKI,KAAKd,OACxCU,KAAKH,UAAY,IAAIL,EAAOa,KAAKC,OAAOZ,UAAUJ,GAClDU,KAAKH,UAAUU,YAAY,iBAAkBP,KAAKL,mB,6CAGlDK,KAAKH,UAAUW,eAAe,iBAAkBR,KAAKL,qB,GApBlBO,IAAMO,WCUvCC,EAAY,SAAC,GAAD,EAAEC,MAAF,EAASC,SAAT,OACd,kBAACxB,EAAD,KAII,kBAAC,EAAD,MACA,kBAACC,EAAD,mBAGOwB,EAjBF,kBACT,kBAAC9B,EAAD,KACI,kBAACG,EAAD,oBACA,kBAAC,EAAD,Q,MCGO4B,MARf,WAEE,OACI,kBAAC,EAAD,OCKcC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.21d9f957.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    background: linear-gradient(\r\n      rgba(0, 0, 0, 0.05), \r\n      rgba(0, 0, 0, 0.45)\r\n    ),url(https://miro.medium.com/max/4064/1*qYUvh-EtES8dtgKiBRiLsA.png);\r\n`\r\nexport const Title = styled.h1`\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    font-size: 80pt;\r\n    margin: 10px;\r\n    color: white;\r\n`\r\nexport const SearchContainer = styled.div`\r\n    width: 50vw;\r\n    height: 7vh;\r\n    display:flex;\r\n    border-radius: 10px;\r\n    box-shadow: -3px 4px 10px rgba(0, 0, 0, 0.25);\r\n`\r\nexport const SearchInput = styled.input`\r\n    border-radius: 10px 0 0 10px;\r\n    width: 75%;\r\n    border:none;\r\n    padding: 2px 2px 2px 32px;\r\n    background-image: url(https://img.icons8.com/all/500/search--v1.png);\r\n    background-size: 15px;\r\n    background-repeat: no-repeat;\r\n    background-position: 10px 12px;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n`\r\nexport const SearchButton = styled.button`\r\n    border-radius: 0 10px 10px 0;\r\n    flex-grow: 1;\r\n    color: white;\r\n    border: none;\r\n    background-color: #4478FF;\r\n    outline:none;\r\n    font-family: Futura, \"Trebuchet MS\", Arial, sans-serif;\r\n    &:focus{\r\n      outline:none;\r\n    }\r\n    &:hover{\r\n      cursor:pointer;\r\n    }\r\n`","import React, {useEffect} from 'react';\r\n//import useScript from '../hooks/useScript'\r\n\r\nconst google = window.google;\r\nexport default class SearchBox extends React.Component {\r\n  static propTypes = {\r\n    placeholder: React.PropTypes.string,\r\n    onPlacesChanged: React.PropTypes.func\r\n  }\r\n  render() {\r\n    //useScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGlY-kxEPPTY9mgGkHpY6WlPqQQpMflvo&libraries=places\")\r\n    return <input ref=\"input\" {...this.props} type=\"text\"/>;\r\n  }\r\n  onPlacesChanged = () => {\r\n    if (this.props.onPlacesChanged) {\r\n      this.props.onPlacesChanged(this.searchBox.getPlaces());\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    var input = React.findDOMNode(this.refs.input);\r\n    this.searchBox = new google.maps.places.SearchBox(input);\r\n    this.searchBox.addListener('places_changed', this.onPlacesChanged);\r\n  }\r\n  componentWillUnmount() {\r\n    this.searchBox.removeListener('places_changed', this.onPlacesChanged);\r\n  }\r\n}","import React from 'react'\r\nimport {Container, Title, SearchContainer, SearchButton, SearchInput} from '../styles'\r\n// import {GoogleApiWrapper} from 'google-maps-react'\r\n//import SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\r\nimport Searchbox from './Searchbox'\r\n\r\nconst Home = () => (\r\n    <Container>\r\n        <Title>where2meet?</Title>\r\n        <SearchBar></SearchBar>\r\n    </Container>\r\n\r\n)\r\n\r\nconst SearchBar = ({value, setValue}) => (\r\n    <SearchContainer>\r\n        {/* <SearchInput  \r\n            value={value} \r\n            setValue={setValue}></SearchInput> */}\r\n        <Searchbox></Searchbox>\r\n        <SearchButton>Let's go</SearchButton>\r\n    </SearchContainer>\r\n)\r\nexport default Home","import React from 'react';\nimport Home from './Components/Home'\nimport './App.css';\n\nfunction App() {\n\n  return (\n      <Home>\n      </Home>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}